p2.asm:

addi r3,r5,3
beqz r3, .jump
addi r2, r4, 2
.jump:
xor r1, r2, r3

In the example (p2.asm), let's assume initially all the registers (r0-r7) had data as 16'h0. When the first instruction executes, r3 gets the new data as 16'h3. 
On the second instruction (which is a branch), we are doing some comparison here
 if the data in register r3 is 16'h0, 
	then we go to the address specified by .jump and execute that instruction; in this case, it's  xor r1, r2, r3

 else
	branch is not taken; execute the next instruction i.e. addi r2, r4, 2 


While designing the above scenario on the hardware, there are two cases to consider:
	1. No branch prediction strategy considered
		In this case, we simply have to wait until the branch resolves and we stall certain pipeline stages for the next set of instructions. Which is bad for getting an optimum CPI.

	2. Assume, branch is always taken
		With this assumption, if we proceed and eventually if the branch is taken, then we simply execute the instruction xor r1, r2, r3.
		But if the branch is actually not taken, there comes an issue; we have to flush the pipeline (clock cycles are wasted) and execute the instruction addi r2, r4, 2.
		
	3. Similarly if we assume and design the hardware such that branch is always not taken, there is always a penalty when branch is taken.

To put a conclusion remark, branch prediction helps in maintaining a desired CPI in a pipelined processor, but it comes with huge penalty sometimes if the the prediction wrong in most of the time.



	
Q. Will branch prediction always take only 1 cycle? 
My Answer: Short answer is NO. It depends on the hardware and ISA. In pentium4 pipeline, branches take 19 cycles to resolve and identifying a branch takes 4 cycles. So the answer will be subjective.
